AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  PrivateRouteTables:
    Type: String

  PublicSubnet:
    Type: String

Mappings:
  RegionMap:
    'ap-southeast-2':
      AMI: 'ami-00c1445796bc0a29f'

Resources:
  NATInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref NATInstanceLaunchTemplate
            Version: !GetAtt NATInstanceLaunchTemplate.LatestVersionNumber
          Overrides:
          - InstanceType: t3a.nano
          - InstanceType: t3.nano
      MaxSize: '1'
      MinSize: '1'
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupInServiceInstances
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value: !Join ['', [!Ref 'AWS::AccountId', '-', !Ref 'AWS::Region', '-', !Ref 'AWS::StackName']]

  NATInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName: ec2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:ModifyInstanceAttribute'
            - 'ec2:CreateRoute'
            - 'ec2:ReplaceRoute'
            - 'ec2:AttachNetworkInterface'
            Resource:
            - '*'

  NATInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ['', [!Ref 'AWS::AccountId', '-', !Ref 'AWS::Region', '-', !Ref 'AWS::StackName']]
      Roles:
      - !Ref NATInstanceRole

  NATStaticNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet
      SourceDestCheck: False

  NATInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ['', [!Ref 'AWS::AccountId', '-', !Ref 'AWS::Region', '-', !Ref 'AWS::StackName']]
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt NATInstanceProfile.Arn
        ImageId:
          Fn::FindInMap:
          - RegionMap
          - !Ref 'AWS::Region'
          - AMI
        InstanceType: t3.nano
        UserData:
          'Fn::Base64': !Sub
          - |
            #!/bin/bash -ex
            trap '/opt/aws/bin/cfn-signal -e 1 --region ${Region} --stack ${StackName} --resource NATAutoScalingGroup' ERR

            INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)

            aws --region ${Region} ec2 modify-instance-attribute \
              --instance-id $INSTANCEID \
              --source-dest-check "{\"Value\": false}"

            aws --region ${Region} ec2 attach-network-interface \
              --device-index 1 \
              --instance-id $INSTANCEID \
              --network-interface-id ${NATStaticNetworkInterface}

            sleep 5

            # Configure the instance to run as a Port Address Translator (PAT) to provide
            # Internet connectivity to private instances.

            function log { logger -s -t "vpc" -- $1; }

            function die {
                [ -n "$1" ] && log "$1"
                log "Configuration of PAT failed!"
                exit 1
            }

            # Sanitize PATH
            export PATH="/usr/sbin:/sbin:/usr/bin:/bin"

            log "Determining the MAC address on eth1..."
            ETH1_MAC=$(cat /sys/class/net/eth1/address) ||
                die "Unable to determine MAC address on eth1."
            log "Found MAC ${!ETH1_MAC} for eth1."

            # This script is intended to run only on a NAT instance for a VPC
            # Check if the instance is a VPC instance by trying to retrieve vpc id
            VPC_ID_URI="http://169.254.169.254/latest/meta-data/network/interfaces/macs/${!ETH1_MAC}/vpc-id"

            VPC_ID=$(curl --retry 3 --silent --fail ${!VPC_ID_URI})
            if [ $? -ne 0 ]; then
                log "The script is not running on a VPC instance. PAT may masquerade traffic for Internet hosts!"
            fi

            log "Enabling PAT..."
            sysctl -q -w net.ipv4.ip_forward=1 net.ipv4.conf.eth1.send_redirects=0 &&
            (
                iptables -t nat -C POSTROUTING -o eth1 -j MASQUERADE 2> /dev/null ||
                iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE ) ||
            die

            sysctl net.ipv4.ip_forward net.ipv4.conf.eth1.send_redirects | log
            iptables -n -t nat -L POSTROUTING | log

            log "Configuration of PAT complete."

            IFS=$','
            tables=${PrivateRouteTables}
            for table in $tables; do
              aws --region ${Region} ec2 replace-route \
                --route-table-id $table \
                --destination-cidr-block "0.0.0.0/0" \
                --network-interface-id ${NATStaticNetworkInterface} || \
                  aws --region ${Region} ec2 create-route \
                  --route-table-id $table \
                  --destination-cidr-block "0.0.0.0/0" \
                  --network-interface-id ${NATStaticNetworkInterface}
            done
            unset IFS
          - PrivateRouteTables: !Ref PrivateRouteTables
            Region: !Ref 'AWS::Region'
            StackName: !Ref 'AWS::StackName'
            NATStaticNetworkInterface: !Ref NATStaticNetworkInterface
